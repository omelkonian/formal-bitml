------------------------------------------------------------------------
-- Utilities for contracts, preconditions and advertisments.
------------------------------------------------------------------------
open import Data.List.Membership.Propositional.Properties

open import Prelude.Init; open SetAsType
open import Prelude.Lists
open import Prelude.Lists.Dec
open import Prelude.DecEq
open import Prelude.Membership
open import Prelude.Lists.Collections
open import Prelude.Bifunctor
open import Prelude.General
open import Prelude.Null

open import BitML.BasicTypes
open import BitML.Predicate

module BitML.Contracts.Helpers ‚ãØ (let open ‚ãØ ‚ãØ) where

open import BitML.Contracts.Types ‚ãØ hiding (C; d)
open import BitML.Contracts.Induction ‚ãØ

PutComponent = Ids √ó Secrets √ó Predicate

removeTopDecorations : Branch ‚Üí Branch
removeTopDecorations (_       ‚áí d) = removeTopDecorations d
removeTopDecorations (after _ ‚áí d) = removeTopDecorations d
removeTopDecorations d             = d

removeTopDecorations-idemp : Alg‚â°.IdempotentFun removeTopDecorations
removeTopDecorations-idemp = Œª where
  (_ ‚áí d)       ‚Üí removeTopDecorations-idemp d
  (after _ ‚áí d) ‚Üí removeTopDecorations-idemp d
  (withdraw _)               ‚Üí refl
  (put _ &reveal _ if _ ‚áí _) ‚Üí refl
  (split _)                  ‚Üí refl

----------------------
-- ** Module "macros"

-- selecting a sub-contract and stripping decorations
module ‚à£SELECT (c : Contract) (i : Index c) where
  d  = c ‚Äº i
  d‚àó = removeTopDecorations d

open import BitML.Contracts.Types ‚ãØ using (d)

----------------
-- ** Collectors

-- T0D0 use Type'.nub on all results? or only on use-sites

private variable X : Type

mkCollect : (‚àÄ e ‚Üí (‚àÄ e‚Ä≤ ‚Üí e‚Ä≤ ‚â∫ D e ‚Üí List X) ‚Üí List X) ‚Üí ‚ÑÇ ‚Üí List X
mkCollect {X = X} mk = ‚â∫-rec _ go
  where
    go : ‚àÄ c ‚Üí (‚àÄ c‚Ä≤ ‚Üí c‚Ä≤ ‚â∫ c ‚Üí List X) ‚Üí List X
    go (D c)     f = mk c f
    go (C cs)    f = concat $ mapWith‚àà cs (f (D _) ‚àò ‚â∫-‚àà)
    go (VCS vcs) f = concat $ mapWith‚àà (map proj‚ÇÇ vcs) (f (C _) ‚àò ‚â∫-‚àà·µõ)

instance
  -- H‚ÑÇ : ‚¶É _ : Branch has X ‚¶Ñ ‚Üí ‚ÑÇ has X
  -- H‚ÑÇ .collect = mkCollect (Œª e _ ‚Üí collect e)

  H‚ÑÇ : ‚¶É _ : Branch has X ‚¶Ñ ‚¶É _ : Contract has X ‚¶Ñ ‚¶É _ : VContracts has X ‚¶Ñ ‚Üí ‚ÑÇ has X
  H‚ÑÇ .collect ùïî with ùïî
  ... | D   d   = collect d
  ... | C   c   = collect c
  ... | VCS vcs = collect vcs

-- participants

participants‚ÑÇ : ‚ÑÇ ‚Üí List Participant
participants‚ÑÇ = mkCollect go
  where
    go : ‚àÄ e ‚Üí (‚àÄ e‚Ä≤ ‚Üí e‚Ä≤ ‚â∫ D e ‚Üí List Participant) ‚Üí List Participant
    go d f with d
    ... | put _ &reveal _ if _ ‚áí c = f (C c) ‚â∫-put -- it
    ... | withdraw p               = [ p ]
    ... | split vcs                = f (VCS vcs) ‚â∫-split -- it
    ... | p ‚áí d‚Ä≤                   = p ‚à∑ f (D d‚Ä≤) ‚â∫-auth -- it
    ... | after _ ‚áí d‚Ä≤             = f (D d‚Ä≤) ‚â∫-after -- it

instance
  HP·µà : Branch has Participant
  HP·µà .collect = participants‚ÑÇ ‚àò D

  HP·∂ú : Contract has Participant
  HP·∂ú .collect = participants‚ÑÇ ‚àò C

  HP·µõ : VContracts has Participant
  HP·µõ .collect = participants‚ÑÇ ‚àò VCS

  HP·µñ : Precondition has Participant
  HP·µñ .collect pr with pr
  ... | p :? _ at _ = [ p ]
  ... | p :! _ at _ = [ p ]
  ... | p :secret _ = [ p ]
  ... | p‚ÇÅ ‚à£‚à£ p‚ÇÇ    = collect p‚ÇÅ ++ collect p‚ÇÇ

  HP·µÉ : Ad has Participant
  -- HP·µÉ .collect (‚ü® g ‚ü© c) = collect g ++ collect c
  HP·µÉ .collect = collect ‚àò G

participants nub-participants : ‚¶É _ :  X has Participant ‚¶Ñ ‚Üí X ‚Üí List Participant
participants = collect
nub-participants = nub ‚àò participants

-- names

names‚ÑÇ : ‚ÑÇ ‚Üí List Name
names‚ÑÇ = mkCollect go
  where
    go : ‚àÄ e ‚Üí (‚àÄ e‚Ä≤ ‚Üí e‚Ä≤ ‚â∫ D e ‚Üí List Name) ‚Üí List Name
    go d f with d
    ... | put xs &reveal as if _ ‚áí c = map inj‚ÇÇ xs ++ map inj‚ÇÅ as ++ f (C c) ‚â∫-put -- it
    ... | withdraw _                 = []
    ... | split vcs                  = f (VCS vcs) ‚â∫-split -- it
    ... | _ ‚áí d‚Ä≤                     = f (D d‚Ä≤) ‚â∫-auth -- it
    ... | after _ ‚áí d‚Ä≤               = f (D d‚Ä≤) ‚â∫-after -- it

instance
  HN·µà : Branch has Name
  HN·µà .collect = names‚ÑÇ ‚àò D

  HN·∂ú : Contract has Name
  HN·∂ú .collect = names‚ÑÇ ‚àò C

  HN·µõ : VContracts has Name
  HN·µõ .collect = names‚ÑÇ ‚àò VCS

  HN·µñ : Precondition has Name
  HN·µñ .collect pr with pr
  ... | _ :? _ at x = [ inj‚ÇÇ x ]
  ... | _ :! _ at x = [ inj‚ÇÇ x ]
  ... | _ :secret a = [ inj‚ÇÅ a ]
  ... | p‚ÇÅ ‚à£‚à£ p‚ÇÇ    = collect p‚ÇÅ ++ collect p‚ÇÇ

  HN·µÉ : Ad has Name
  -- HN·µÉ .collect (‚ü® g ‚ü© c) = collect g ++ collect c
  HN·µÉ .collect = collect ‚àò G

  HS·µÉ ≥ : Arith has Name
  HS·µÉ ≥ .collect ar with ar
  ... | ` _    = []
  ... | ‚à£ s ‚à£  = [ inj‚ÇÅ s ]
  ... | x `+ y = collect x ++ collect y
  ... | x `- y = collect x ++ collect y

  H·µñ ≥ : ‚¶É _ :  Arith has X ‚¶Ñ ‚Üí Predicate has X
  H·µñ ≥ .collect pr with pr
  ... | `true   = []
  ... | x `‚àß y  = collect x ++ collect y
  ... | `¬¨ x    = collect x
  ... | x `= y  = collect x ++ collect y
  ... | x `< y  = collect x ++ collect y


names : ‚¶É _ :  X has Name ‚¶Ñ ‚Üí X ‚Üí Names
names = collect

namesÀ° : ‚¶É _ :  X has Name ‚¶Ñ ‚Üí X ‚Üí Secrets
namesÀ° = filter‚ÇÅ ‚àò names

names ≥ : ‚¶É _ :  X has Name ‚¶Ñ ‚Üí X ‚Üí Ids
names ≥ = filter‚ÇÇ ‚àò names

secrets = namesÀ°
ids     = names ≥

-- put components

putComponents‚ÑÇ : ‚ÑÇ ‚Üí List PutComponent
putComponents‚ÑÇ = mkCollect go
  where
    go : ‚àÄ d ‚Üí (‚àÄ d‚Ä≤ ‚Üí d‚Ä≤ ‚â∫ D d ‚Üí List PutComponent) ‚Üí List PutComponent
    go d f with d
    ... | put xs &reveal as if p ‚áí c = (xs , as , p) ‚à∑ f (C c) ‚â∫-put -- it
    ... | withdraw _                 = []
    ... | split vcs                  = f (VCS vcs) ‚â∫-split -- it
    ... | _ ‚áí d‚Ä≤                     = f (D d‚Ä≤) ‚â∫-auth -- it
    ... | after _ ‚áí d‚Ä≤               = f (D d‚Ä≤) ‚â∫-after -- it

instance
  HPC·µà : Branch has PutComponent
  HPC·µà .collect = putComponents‚ÑÇ ‚àò D

  HPC·∂ú : Contract has PutComponent
  HPC·∂ú .collect = putComponents‚ÑÇ ‚àò C

  HPC·µõ : VContracts has PutComponent
  HPC·µõ .collect = putComponents‚ÑÇ ‚àò VCS

putComponents : ‚¶É _ :  X has PutComponent ‚¶Ñ ‚Üí X ‚Üí List PutComponent
putComponents = collect

-- deposits

instance
  -- HD‚áíHD : ‚¶É _ : X has TDepositRef ‚¶Ñ ‚Üí X has DepositRef
  -- HD‚áíHD ‚¶É hd ‚¶Ñ .collect = map proj‚ÇÇ ‚àò collect ‚¶É hd ‚¶Ñ

  HTD·µñ : Precondition has TDepositRef
  HTD·µñ .collect pr with pr
  ... | p :? v at x = [ volatile   , p , v , x ]
  ... | p :! v at x = [ persistent , p , v , x ]
  ... | _ :secret _ = []
  ... | p‚ÇÅ ‚à£‚à£ p‚ÇÇ    = collect p‚ÇÅ ++ collect p‚ÇÇ

  HD·µñ : Precondition has DepositRef
  HD·µñ .collect = map proj‚ÇÇ ‚àò collect

  HTD·µÉ : Ad has TDepositRef
  HTD·µÉ .collect = collect ‚àò G

  HD·µÉ : Ad has DepositRef
  HD·µÉ .collect = map proj‚ÇÇ ‚àò collect

tdeposits : ‚¶É _ :  X has TDepositRef ‚¶Ñ ‚Üí X ‚Üí List TDepositRef
tdeposits = collect

deposits : ‚¶É _ :  X has DepositRef ‚¶Ñ ‚Üí X ‚Üí List DepositRef
deposits ‚¶É hd ‚¶Ñ = collect ‚¶É hd ‚¶Ñ

private
  -- ** check that we get all accessors we want
  ‚àÄC : Type ‚Üí Type
  ‚àÄC A = (Branch ‚Üí List A) √ó (Contract ‚Üí List A) √ó (VContracts ‚Üí List A)

  ‚àÄP : Type ‚Üí Type
  ‚àÄP A = (Precondition ‚Üí List A) √ó (Ad ‚Üí List A)

  ‚àÄ‚àÄ : Type ‚Üí Type
  ‚àÄ‚àÄ A = ‚àÄC A √ó ‚àÄP A

  _ : ‚àÄ‚àÄ Name
  _ = (names , names , names) , (names , names)

  _ : ‚àÄ‚àÄ Secret
  _ = (secrets , secrets , secrets) , (secrets , secrets)

  _ : ‚àÄ‚àÄ Participant
  _ = (participants , participants , participants) , (participants , participants)

  _ : ‚àÄC PutComponent
  _ = putComponents , putComponents , putComponents

  _ : ‚àÄP TDepositRef
  _ = tdeposits , tdeposits

  _ : ‚àÄP DepositRef
  _ = deposits , deposits

secretsOf·µñ : Participant ‚Üí Precondition ‚Üí Secrets
secretsOf·µñ A = go
  where
    go : Precondition ‚Üí Secrets
    go (B :secret s) with A ‚âü B
    ... | yes _ = [ s ]
    ... | no  _ = []
    go (l ‚à£‚à£ r )     = go l ++ go r
    go _             = []

namesÀ°‚áípart : a ‚àà namesÀ° g ‚Üí Œ£ Participant (_‚àà nub-participants g)
namesÀ°‚áípart {a}{A :secret .a} (here refl) = -, here refl
namesÀ°‚áípart {a}{l ‚à£‚à£ r} a‚àà
  rewrite mapMaybe-++ isInj‚ÇÅ (names l) (names r)
  with L.Mem.‚àà-++‚Åª (namesÀ° l) a‚àà
... | inj‚ÇÅ a‚ààÀ° = map‚ÇÇ‚Ä≤ (‚àà-nub‚Å∫ ‚àò L.Mem.‚àà-++‚Å∫À° {xs = participants l} ‚àò ‚àà-nub‚Åª) $ namesÀ°‚áípart {g = l} a‚ààÀ°
... | inj‚ÇÇ a‚àà ≥ = map‚ÇÇ‚Ä≤ (‚àà-nub‚Å∫ ‚àò L.Mem.‚àà-++‚Å∫ ≥ (participants l) ‚àò ‚àà-nub‚Åª) $ namesÀ°‚áípart {g = r} a‚àà ≥

names‚äÜsecretsOf : (a‚àà : a ‚àà namesÀ° g) ‚Üí a ‚àà secretsOf·µñ (proj‚ÇÅ $ namesÀ°‚áípart {g = g} a‚àà) g
names‚äÜsecretsOf {a}{g = A :secret .a} (here refl) rewrite ‚âü-refl A = here refl
names‚äÜsecretsOf {a}{g = l ‚à£‚à£ r} a‚àà
  rewrite mapMaybe-++ isInj‚ÇÅ (names l) (names r)
  with L.Mem.‚àà-++‚Åª (namesÀ° l) a‚àà
... | inj‚ÇÅ a‚ààÀ° = L.Mem.‚àà-++‚Å∫À° (names‚äÜsecretsOf {g = l} a‚ààÀ°)
... | inj‚ÇÇ a‚àà ≥ = L.Mem.‚àà-++‚Å∫ ≥ _ (names‚äÜsecretsOf {g = r} a‚àà ≥)

-- Deposits

isVolatile isPersistent : TDepositRef ‚Üí Maybe DepositRef
isVolatile = case_of Œª where
  (volatile   , d) ‚Üí just d
  (persistent , _) ‚Üí nothing
isPersistent = case_of Œª where
  (volatile   , _) ‚Üí nothing
  (persistent , d) ‚Üí just d

volatileDeposits persistentDeposits : Precondition ‚Üí List DepositRef
volatileDeposits   = mapMaybe isVolatile   ‚àò tdeposits
persistentDeposits = mapMaybe isPersistent ‚àò tdeposits

persistentValue : Precondition ‚Üí Value
persistentValue = ‚àë‚Ñï ‚àò map (proj‚ÇÅ ‚àò proj‚ÇÇ) ‚àò persistentDeposits

volatileParticipants persistentParticipants : Precondition ‚Üí List Participant
volatileParticipants   = map proj‚ÇÅ ‚àò volatileDeposits
persistentParticipants = map proj‚ÇÅ ‚àò persistentDeposits

volatileNames ≥ persistentNames ≥ : Precondition ‚Üí Ids
volatileNames ≥   = map (proj‚ÇÇ ‚àò proj‚ÇÇ) ‚àò volatileDeposits
persistentNames ≥ = map (proj‚ÇÇ ‚àò proj‚ÇÇ) ‚àò persistentDeposits

volatileNames‚äÜ : volatileNames ≥ g ‚äÜ names ≥ g
volatileNames‚äÜ {g = A :? v at x} n‚àà = n‚àà
volatileNames‚äÜ {g = l ‚à£‚à£ r}  {n} n‚àà
  with (p , v , .n) , d‚àà , refl ‚Üê ‚àà-map‚Åª (proj‚ÇÇ ‚àò proj‚ÇÇ) n‚àà
  with _ , d‚àà , d‚â° ‚Üê ‚àà-mapMaybe‚Åª isVolatile {xs = tdeposits (l ‚à£‚à£ r)} d‚àà
  with ‚àà-++‚Åª (tdeposits l) d‚àà
... | inj‚ÇÅ d‚ààÀ°
  with (_ , m‚àà , m‚â°) ‚Üê ‚àà-mapMaybe‚Åª isInj‚ÇÇ {xs = names l} $ volatileNames‚äÜ {g = l}
                     $ ‚àà-map‚Å∫ (proj‚ÇÇ ‚àò proj‚ÇÇ)
                     $ ‚àà-mapMaybe‚Å∫ isVolatile d‚ààÀ° d‚â°
  = ‚àà-mapMaybe‚Å∫ isInj‚ÇÇ {xs = names (l ‚à£‚à£ r)} (‚àà-++‚Å∫À° m‚àà) m‚â°
... | inj‚ÇÇ d‚àà ≥
  with (_ , m‚àà , m‚â°) ‚Üê ‚àà-mapMaybe‚Åª isInj‚ÇÇ {xs = names r} $ volatileNames‚äÜ {g = r}
                     $ ‚àà-map‚Å∫ (proj‚ÇÇ ‚àò proj‚ÇÇ)
                     $ ‚àà-mapMaybe‚Å∫ isVolatile d‚àà ≥ d‚â°
  = ‚àà-mapMaybe‚Å∫ isInj‚ÇÇ {xs = names (l ‚à£‚à£ r)} (‚àà-++‚Å∫ ≥ (names l) m‚àà) m‚â°

persistentNames‚äÜ : persistentNames ≥ g ‚äÜ names ≥ g
persistentNames‚äÜ {g = A :! v at x} n‚àà = n‚àà
persistentNames‚äÜ {g = l ‚à£‚à£ r}  {n} n‚àà
  with (p , v , .n) , d‚àà , refl ‚Üê ‚àà-map‚Åª (proj‚ÇÇ ‚àò proj‚ÇÇ) n‚àà
  with _ , d‚àà , d‚â° ‚Üê ‚àà-mapMaybe‚Åª isPersistent {xs = tdeposits (l ‚à£‚à£ r)} d‚àà
  with ‚àà-++‚Åª (tdeposits l) d‚àà
... | inj‚ÇÅ d‚ààÀ°
  with (_ , m‚àà , m‚â°) ‚Üê ‚àà-mapMaybe‚Åª isInj‚ÇÇ {xs = names l} $ persistentNames‚äÜ {g = l}
                     $ ‚àà-map‚Å∫ (proj‚ÇÇ ‚àò proj‚ÇÇ)
                     $ ‚àà-mapMaybe‚Å∫ isPersistent d‚ààÀ° d‚â°
  = ‚àà-mapMaybe‚Å∫ isInj‚ÇÇ {xs = names (l ‚à£‚à£ r)} (‚àà-++‚Å∫À° m‚àà) m‚â°
... | inj‚ÇÇ d‚àà ≥
  with (_ , m‚àà , m‚â°) ‚Üê ‚àà-mapMaybe‚Åª isInj‚ÇÇ {xs = names r} $ persistentNames‚äÜ {g = r}
                     $ ‚àà-map‚Å∫ (proj‚ÇÇ ‚àò proj‚ÇÇ)
                     $ ‚àà-mapMaybe‚Å∫ isPersistent d‚àà ≥ d‚â°
  = ‚àà-mapMaybe‚Å∫ isInj‚ÇÇ {xs = names (l ‚à£‚à£ r)} (‚àà-++‚Å∫ ≥ (names l) m‚àà) m‚â°

volatileParticipants‚äÜ : volatileParticipants g ‚äÜ participants g
volatileParticipants‚äÜ {g = A :? _ at _} p‚àà = p‚àà
volatileParticipants‚äÜ {g = l ‚à£‚à£ r} {p} p‚àà
  with (.p , v , x) , d‚àà , refl ‚Üê ‚àà-map‚Åª proj‚ÇÅ p‚àà
  with _ , d‚àà , d‚â° ‚Üê ‚àà-mapMaybe‚Åª isVolatile {xs = tdeposits (l ‚à£‚à£ r)} d‚àà
  with ‚àà-++‚Åª (tdeposits l) d‚àà
... | inj‚ÇÅ d‚ààÀ° = ‚àà-++‚Å∫À° (volatileParticipants‚äÜ {g = l} $ ‚àà-map‚Å∫ proj‚ÇÅ $ ‚àà-mapMaybe‚Å∫ isVolatile d‚ààÀ° d‚â°)
... | inj‚ÇÇ d‚àà ≥ = ‚àà-++‚Å∫ ≥ (participants l) (volatileParticipants‚äÜ {g = r} $ ‚àà-map‚Å∫ proj‚ÇÅ $ ‚àà-mapMaybe‚Å∫ isVolatile d‚àà ≥ d‚â°)

persistentParticipants‚äÜ : persistentParticipants g ‚äÜ participants g
persistentParticipants‚äÜ {g = A :! _ at _} p‚àà = p‚àà
persistentParticipants‚äÜ {g = l ‚à£‚à£ r} {p} p‚àà
  with (.p , v , x) , d‚àà , refl ‚Üê ‚àà-map‚Åª proj‚ÇÅ p‚àà
  with _ , d‚àà , d‚â° ‚Üê ‚àà-mapMaybe‚Åª isPersistent {xs = tdeposits (l ‚à£‚à£ r)} d‚àà
  with ‚àà-++‚Åª (tdeposits l) d‚àà
... | inj‚ÇÅ d‚ààÀ° = ‚àà-++‚Å∫À° (persistentParticipants‚äÜ {g = l} $ ‚àà-map‚Å∫ proj‚ÇÅ $ ‚àà-mapMaybe‚Å∫ isPersistent d‚ààÀ° d‚â°)
... | inj‚ÇÇ d‚àà ≥ = ‚àà-++‚Å∫ ≥ (participants l) (persistentParticipants‚äÜ {g = r} $ ‚àà-map‚Å∫ proj‚ÇÅ $ ‚àà-mapMaybe‚Å∫ isPersistent d‚àà ≥ d‚â°)

getDeposit : names ≥ g ‚Ü¶ (Œ£[ d ‚àà DepositRef ] (proj‚ÇÅ d ‚àà participants g))
getDeposit {g = A :? v at x} (here refl) = (A , v , x) , here refl
getDeposit {g = A :! v at x} (here refl) = (A , v , x) , here refl
getDeposit {g = _ :secret _} ()
getDeposit {g = l ‚à£‚à£ r}      x‚àà
  with _ , y‚àà , y‚â° ‚Üê ‚àà-mapMaybe‚Åª isInj‚ÇÇ {xs = names l ++ names r} x‚àà
  with ‚àà-++‚Åª (names l) y‚àà
... | inj‚ÇÅ x‚ààÀ° = map‚ÇÇ‚Ä≤ ‚àà-++‚Å∫À° $ getDeposit {g = l} (‚àà-mapMaybe‚Å∫ isInj‚ÇÇ x‚ààÀ° y‚â°)
... | inj‚ÇÇ x‚àà ≥ = map‚ÇÇ‚Ä≤ (‚àà-++‚Å∫ ≥ (participants l)) $ getDeposit {g = r} (‚àà-mapMaybe‚Å∫ isInj‚ÇÇ x‚àà ≥ y‚â°)

checkDeposit : DepositType ‚Üí Id ‚Üí Precondition ‚Üí Maybe Value
checkDeposit ty x
  = L.head ‚àò map (proj‚ÇÅ ‚àò proj‚ÇÇ) ‚àò filter ((_‚âü x) ‚àò proj‚ÇÇ ‚àò proj‚ÇÇ)
  ‚àò (case ty of Œª{ persistent ‚Üí persistentDeposits; volatile ‚Üí volatileDeposits })

getName : (A , v , x) ‚àà persistentDeposits g
        ‚Üí x ‚àà names ≥ g
getName {g = _ :! _ at _} (here refl) = here refl
getName {g = _ :! _ at _} (there ())
getName {g = l ‚à£‚à£ r}      d‚àà
  with _ , td‚àà , td‚â° ‚Üê ‚àà-mapMaybe‚Åª isPersistent {xs = tdeposits (l ‚à£‚à£ r)} d‚àà
  with ‚àà-++‚Åª (tdeposits l) td‚àà
... | inj‚ÇÅ d‚ààÀ° =
  let _ , y‚àà , y‚â° = ‚àà-mapMaybe‚Åª isInj‚ÇÇ {xs = names l} (getName {g = l} $ ‚àà-mapMaybe‚Å∫ isPersistent d‚ààÀ° td‚â°)
  in ‚àà-mapMaybe‚Å∫ isInj‚ÇÇ (‚àà-++‚Å∫À° y‚àà) y‚â°
... | inj‚ÇÇ d‚àà ≥ =
  let _ , y‚àà , y‚â° = ‚àà-mapMaybe‚Åª isInj‚ÇÇ {xs = names r} (getName {g = r} $ ‚àà-mapMaybe‚Å∫ isPersistent d‚àà ≥ td‚â°)
  in ‚àà-mapMaybe‚Å∫ isInj‚ÇÇ (‚àà-++‚Å∫ ≥ (names l) y‚àà) y‚â°

-- Decorations

decorations‚äé : Branch ‚Üí List (Participant ‚äé Time)
decorations‚äé (A       ‚áí d) = inj‚ÇÅ A ‚à∑ decorations‚äé d
decorations‚äé (after t ‚áí d) = inj‚ÇÇ t ‚à∑ decorations‚äé d
decorations‚äé _             = []

decorations : Branch ‚Üí List Participant √ó List Time
decorations c = partitionSums (decorations‚äé c)

authDecorations : Branch ‚Üí List Participant
authDecorations = proj‚ÇÅ ‚àò decorations

timeDecorations : Branch ‚Üí List Time
timeDecorations = proj‚ÇÇ ‚àò decorations

auth‚äÜpart : authDecorations d ‚äÜ participants d
auth‚äÜpart {d = d‚ÇÄ} with d‚ÇÄ
... | put _ &reveal _ if _ ‚áí _ = Œª ()
... | withdraw _               = Œª ()
... | split _                  = Œª ()
... | p ‚áí d                    = Œª{ (here refl) ‚Üí here refl; (there p‚àà)  ‚Üí there $ auth‚äÜpart {d = d} p‚àà }
... | after _ ‚áí d              = auth‚äÜpart {d = d}

decorations‚àòremove‚â°[] : decorations‚äé (removeTopDecorations d) ‚â° []
decorations‚àòremove‚â°[] {_ ‚áí d}       = decorations‚àòremove‚â°[] {d}
decorations‚àòremove‚â°[] {after _ ‚áí d} = decorations‚àòremove‚â°[] {d}
decorations‚àòremove‚â°[] {withdraw _} = refl
decorations‚àòremove‚â°[] {split _} = refl
decorations‚àòremove‚â°[] {put _ &reveal _ if _ ‚áí _} = refl

authDecorations‚àòremove‚â°[] : Null $ authDecorations $ removeTopDecorations d
authDecorations‚àòremove‚â°[] {d} rewrite decorations‚àòremove‚â°[] {d} = refl

timeDecorations‚àòremove‚â°[] : Null $ authDecorations $ removeTopDecorations d
timeDecorations‚àòremove‚â°[] {d} rewrite decorations‚àòremove‚â°[] {d} = refl

infix 0 _‚â°‚ãØ‚à∂_
_‚â°‚ãØ‚à∂_ : Rel‚ÇÄ Branch
d ‚â°‚ãØ‚à∂ d‚Ä≤ = removeTopDecorations d ‚â° d‚Ä≤

remove-putComponents : (putComponents d) ‚â° putComponents (removeTopDecorations d)
remove-putComponents {_       ‚áí d} rewrite remove-putComponents {d} = refl
remove-putComponents {after _ ‚áí d} rewrite remove-putComponents {d} = refl
remove-putComponents {put _ &reveal _ if _ ‚áí _} = refl
remove-putComponents {withdraw _}               = refl
remove-putComponents {split _}                  = refl

remove-names : names d ‚â° names (removeTopDecorations d)
remove-names {_       ‚áí d} rewrite remove-names {d} = refl
remove-names {after _ ‚áí d} rewrite remove-names {d} = refl
remove-names {put _ &reveal _ if _ ‚áí _} = refl
remove-names {withdraw _}               = refl
remove-names {split _}                  = refl

-- Subterms

subterms subterms‚Å∫ subterms‚Ä≤ : ‚ÑÇ ‚Üí Contract

subterms c@(D _)   = drop 1 $ subterms‚Å∫ c
subterms c@(C _)   = subterms‚Å∫ c
subterms c@(VCS _) = subterms‚Å∫ c

subterms‚Å∫ = mkCollect go
  where
    go : ‚àÄ d ‚Üí (‚àÄ d‚Ä≤ ‚Üí d‚Ä≤ ‚â∫ D d ‚Üí Contract) ‚Üí Contract
    go d f with d
    ... | _       ‚áí d              = f (D d) ‚â∫-auth -- it
    ... | after _ ‚áí d              = f (D d) ‚â∫-after -- it
    ... | split vcs                = d ‚à∑ f (VCS vcs) ‚â∫-split -- it
    ... | put _ &reveal _ if _ ‚áí c = d ‚à∑ f (C c) ‚â∫-put -- it
    ... | withdraw _               = d ‚à∑ []

subterms‚Ä≤ (D d) with d
... | _       ‚áí d              = subterms‚Ä≤ (D d)
... | after _ ‚áí d              = subterms‚Ä≤ (D d)
... | split vcs                = subterms‚Ä≤ (VCS vcs)
... | put _ &reveal _ if _ ‚áí c = subterms‚Ä≤ (C c)
... | withdraw _               = []
subterms‚Ä≤ (C [])                = []
subterms‚Ä≤ (C (d ‚à∑ c))           = d ‚à∑ subterms‚Ä≤ (D d) ++ subterms‚Ä≤ (C c)
subterms‚Ä≤ (VCS [])              = []
subterms‚Ä≤ (VCS ((_ , c) ‚à∑ vcs)) = subterms‚Ä≤ (C c) ++ subterms‚Ä≤ (VCS vcs)

subterms·µà‚Ä≤ subterms·µà‚Å∫ subterms·µà : Branch ‚Üí List Branch
subterms·µà‚Ä≤ = subterms‚Ä≤ ‚àò D
subterms·µà‚Å∫ = subterms‚Å∫ ‚àò D
subterms·µà  = subterms  ‚àò D
-- {-# DISPLAY subterms‚Ä≤ (C c) = subterms·µà‚Ä≤ c #-}

subterms·∂ú‚Ä≤ subterms·∂ú‚Å∫ subterms·∂ú : Contract ‚Üí List Branch
subterms·∂ú‚Ä≤ = subterms‚Ä≤ ‚àò C
subterms·∂ú‚Å∫ = subterms‚Å∫ ‚àò C
subterms·∂ú  = subterms  ‚àò C
-- {-# DISPLAY subterms·∂ú‚Ä≤ cs = subterms‚Ä≤ (CS cs) #-}

subterms·µõ‚Ä≤ subterms·µõ‚Å∫ subterms·µõ : VContracts ‚Üí List Branch
subterms·µõ‚Ä≤ = subterms‚Ä≤ ‚àò VCS
subterms·µõ‚Å∫ = subterms‚Å∫ ‚àò VCS
subterms·µõ  = subterms  ‚àò VCS
-- {-# DISPLAY subterms‚Ä≤ (VCS vcs) = subterms·µõ‚Ä≤ vcs #-}

subterms·µÉ‚Ä≤ subterms·µÉ‚Å∫ subterms·µÉ : Ad ‚Üí List Branch
subterms·µÉ‚Ä≤ (‚ü® _ ‚ü© c) = subterms·∂ú‚Ä≤ c
subterms·µÉ‚Å∫ (‚ü® _ ‚ü© c) = subterms·∂ú‚Å∫ c
subterms·µÉ  (‚ü® _ ‚ü© c) = subterms·∂ú  c

{-
_ : subterms·µà‚Å∫ (put xs &reveal as if p ‚áí c) ‚â° (put xs &reveal as if p ‚áí c) ‚à∑ subterms·∂ú‚Å∫ c
_ = refl

_ : subterms·µà‚Å∫ (A ‚áí d) ‚â° subterms·µà‚Å∫ d
_ = refl

_ : subterms·µà‚Å∫ (split vcs) ‚â° split vcs ‚à∑ subterms·µõ‚Å∫ vcs
_ = refl

subterms‚äÜ : ‚àÄ ùïî ‚Üí subterms‚Å∫ ùïî ‚äÜ subterms‚Ä≤ ùïî
subterms‚äÜ (C (put x &reveal x‚ÇÅ if x‚ÇÇ ‚áí x‚ÇÉ)) = {!!}
subterms‚äÜ (C (withdraw x)) = {!!}
subterms‚äÜ (C (split x)) = {!!}
subterms‚äÜ (C (x ‚áí c)) = {!!}
subterms‚äÜ (C (after x ‚áí c)) = {!!}
subterms‚äÜ (CS  cs)  = {!!}
subterms‚äÜ (VCS vcs) = {!!}

subterms‚äÜ‚àó : removeTopDecorations d ‚àà subterms·∂ú‚Ä≤ [ removeTopDecorations d ]
subterms‚äÜ‚àó {put x &reveal x‚ÇÅ if x‚ÇÇ ‚áí x‚ÇÉ} = here refl
subterms‚äÜ‚àó {withdraw x} = here refl
subterms‚äÜ‚àó {split x} = here refl
subterms‚äÜ‚àó {x ‚áí d} rewrite L.++-identity ≥ (subterms·µà‚Ä≤ d) = there (‚àà-++‚Å∫À° {!subterms‚äÜ‚àó {d}!})
subterms‚äÜ‚àó {after x ‚áí d} = there {!!}

mutual
  subterms‚Å∫‚äÜ·µà‚Ä≤ : subterms·µà‚Å∫ d ‚äÜ removeTopDecorations d ‚à∑ subterms·µà‚Ä≤ d
  subterms‚Å∫‚äÜ·µà‚Ä≤ {put _ &reveal _ if _ ‚áí c} = Œª where
    (here refl) ‚Üí here refl
    (there x‚àà)  ‚Üí there (subterms‚Å∫‚äÜ·∂ú‚Ä≤ {c} x‚àà)
  subterms‚Å∫‚äÜ·µà‚Ä≤ {withdraw _} = Œª where
    (here refl) ‚Üí here refl
  subterms‚Å∫‚äÜ·µà‚Ä≤ {split vcs} = Œª where
    (here refl) ‚Üí here refl
    (there x‚àà)  ‚Üí there (subterms‚Å∫‚äÜ·µõ‚Ä≤ {vcs} x‚àà)
  subterms‚Å∫‚äÜ·µà‚Ä≤ {_ ‚áí d} = subterms‚Å∫‚äÜ·µà‚Ä≤ {d}
  subterms‚Å∫‚äÜ·µà‚Ä≤ {after _ ‚áí d} = subterms‚Å∫‚äÜ·µà‚Ä≤ {d}

  subterms‚Å∫‚äÜ·∂ú‚Ä≤ : subterms·∂ú‚Å∫ c ‚äÜ subterms·∂ú‚Ä≤ c
  subterms‚Å∫‚äÜ·∂ú‚Ä≤ {[]} = id
  subterms‚Å∫‚äÜ·∂ú‚Ä≤ {d ‚à∑ ds} =
    begin‚äÜ subterms·∂ú‚Å∫ (d ‚à∑ ds) ‚â°‚ü®‚ü©
          subterms·µà‚Å∫ d ++ subterms·∂ú‚Å∫ ds ‚äÜ‚ü® {!!} ‚ü©
          (d‚àó ‚à∑ subterms·µà‚Ä≤ d) ++ subterms·∂ú‚Ä≤ ds
          d ‚à∑ subterms·µà‚Ä≤ d ++ subterms·∂ú‚Ä≤ ds ‚â°‚ü®‚ü©
          subterms·∂ú‚Ä≤ (d ‚à∑ ds) ‚äÜ‚àé
    where open ‚äÜ-Reasoning Branch renaming (begin_ to begin‚äÜ_; _‚àé to _‚äÜ‚àé)

  subterms‚Å∫‚äÜ·µõ‚Ä≤ : subterms·µõ‚Å∫ vcs ‚äÜ subterms·µõ‚Ä≤ vcs
  subterms‚Å∫‚äÜ·µõ‚Ä≤ {[]} = id
  subterms‚Å∫‚äÜ·µõ‚Ä≤ {(v , c) ‚à∑ vcs} =
    begin‚äÜ subterms·µõ‚Å∫ ((v , c) ‚à∑ vcs) ‚â°‚ü®‚ü©
           subterms·∂ú‚Å∫ c ++ subterms·µõ‚Å∫ vcs ‚äÜ‚ü® {!!} ‚ü©
           subterms·∂ú‚Ä≤ c ++ subterms·µõ‚Ä≤ vcs ‚â°‚ü®‚ü©
           subterms·µõ‚Ä≤ ((v , c) ‚à∑ vcs) ‚äÜ‚àé
    where open ‚äÜ-Reasoning Branch renaming (begin_ to begin‚äÜ_; _‚àé to _‚äÜ‚àé)
-}

h-sub·µà :
    d ‚àà subterms·µà‚Ä≤ d‚Ä≤
    --------------------------------------
  ‚Üí removeTopDecorations d ‚àà subterms·µà‚Å∫ d‚Ä≤

h-sub·∂ú :
    d ‚àà subterms·∂ú‚Ä≤ ds
    --------------------------------------
  ‚Üí removeTopDecorations d ‚àà subterms·∂ú‚Å∫ ds

h-sub·µõ :
    d ‚àà subterms·µõ‚Ä≤ vcs
    --------------------------------------
  ‚Üí removeTopDecorations d ‚àà subterms·µõ‚Å∫ vcs

h-sub·µà {d} {put _ &reveal _ if _ ‚áí cs} d‚àà = there $ h-sub·∂ú {ds = cs} d‚àà
h-sub·µà {d} {split vcs}                 d‚àà = there $ h-sub·µõ {vcs = vcs} d‚àà
h-sub·µà {d} {_       ‚áí d‚Ä≤} d‚àà = h-sub·µà {d‚Ä≤ = d‚Ä≤} d‚àà
h-sub·µà {d} {after _ ‚áí d‚Ä≤} d‚àà = h-sub·µà {d‚Ä≤ = d‚Ä≤} d‚àà

h-sub·∂ú {.d} {d ‚à∑ ds} (here refl)
  with d
... | put _ &reveal _ if _ ‚áí _ = here refl
... | withdraw _               = here refl
... | split _                  = here refl
... | _       ‚áí d‚Ä≤ = h-sub·∂ú {ds = d‚Ä≤ ‚à∑ ds} (here refl)
... | after _ ‚áí d‚Ä≤ = h-sub·∂ú {ds = d‚Ä≤ ‚à∑ ds} (here refl)
h-sub·∂ú {d} {d‚Ä≤ ‚à∑ ds} (there d‚àà)
  with ‚àà-++‚Åª (subterms·µà‚Ä≤ d‚Ä≤) d‚àà
... | inj‚ÇÇ d‚àà ≥ = ‚àà-++‚Å∫ ≥ (subterms·µà‚Å∫ d‚Ä≤) (h-sub·∂ú {ds = ds} d‚àà ≥)
... | inj‚ÇÅ d‚ààÀ°
  with d‚Ä≤ | d‚ààÀ°
... | put _ &reveal _ if _ ‚áí cs | d‚ààÀ°‚Ä≤ = there $ ‚àà-++‚Å∫À° $ h-sub·∂ú {ds = cs} d‚ààÀ°‚Ä≤
... | split vcs                 | d‚ààÀ°‚Ä≤ = there $ ‚àà-++‚Å∫À° $ h-sub·µõ {vcs = vcs} d‚ààÀ°‚Ä≤
... | _       ‚áí d‚Ä≥ | d‚ààÀ°‚Ä≤ = ‚àà-++‚Å∫À° $ h-sub·µà {d‚Ä≤ = d‚Ä≥} d‚ààÀ°‚Ä≤
... | after _ ‚áí d‚Ä≥ | d‚ààÀ°‚Ä≤ = ‚àà-++‚Å∫À° $ h-sub·µà {d‚Ä≤ = d‚Ä≥} d‚ààÀ°‚Ä≤

h-sub·µõ {d} {(_ , cs) ‚à∑ vcs} d‚àà
  with ‚àà-++‚Åª (subterms·∂ú‚Ä≤ cs) d‚àà
... | inj‚ÇÅ d‚ààÀ° = ‚àà-++‚Å∫À° $ h-sub·∂ú {ds = cs} d‚ààÀ°
... | inj‚ÇÇ d‚àà ≥ = ‚àà-++‚Å∫ ≥ (subterms·∂ú‚Å∫ cs) $ h-sub·µõ {vcs = vcs} d‚àà ≥

h-sub‚àó : subterms·µà‚Ä≤ (removeTopDecorations d) ‚äÜ subterms·µà‚Ä≤ d
h-sub‚àó {_ ‚áí d} = h-sub‚àó {d}
h-sub‚àó {after _ ‚áí d} = h-sub‚àó {d}
h-sub‚àó {put _ &reveal _ if _ ‚áí _} = id
h-sub‚àó {withdraw _} = id
h-sub‚àó {split _} = id

h-sub‚Äº : ‚àÄ {i : Index c} ‚Üí subterms·µà‚Ä≤ (removeTopDecorations (c ‚Äº i)) ‚äÜ subterms·∂ú‚Ä≤ c
h-sub‚Äº {d ‚à∑ _} {0F}     = there ‚àò ‚àà-++‚Å∫À°                ‚àò h-sub‚àó {d}
h-sub‚Äº {d ‚à∑ c} {fsuc i} = there ‚àò ‚àà-++‚Å∫ ≥ (subterms·µà‚Ä≤ d) ‚àò h-sub‚Äº {c}{i}

-- Lemmas about `subterms`

‚Ü¶-‚àà : ‚àÄ {R : Branch ‚Üí Type}
  ‚Üí (‚àÄ {d} ‚Üí d ‚àà ds ‚Üí subterms‚Å∫ (D d) ‚Ü¶‚Ä≤ R)
  ‚Üí subterms‚Å∫ (C ds) ‚Ü¶‚Ä≤ R
‚Ü¶-‚àà {ds = d ‚à∑ ds} f x‚àà
  with ‚àà-++‚Åª (subterms‚Å∫ (D d)) x‚àà
... | inj‚ÇÅ x‚ààÀ° = f (here refl) x‚ààÀ°
... | inj‚ÇÇ x‚àà ≥ = ‚Ü¶-‚àà (f ‚àò there) x‚àà ≥

‚Ü¶-‚àà·µõ : ‚àÄ {R : Branch ‚Üí Type}
  ‚Üí (‚àÄ {c} ‚Üí c ‚àà map proj‚ÇÇ vcs ‚Üí subterms‚Å∫ (C c) ‚Ü¶‚Ä≤ R)
  ‚Üí subterms‚Å∫ (VCS vcs) ‚Ü¶‚Ä≤ R
‚Ü¶-‚àà·µõ {vcs = (_ , c) ‚à∑ vcs} f x‚àà
  with ‚àà-++‚Åª (subterms‚Å∫ (C c)) x‚àà
... | inj‚ÇÅ x‚ààÀ° = f (here refl) x‚ààÀ°
... | inj‚ÇÇ x‚àà ≥ = ‚Ü¶-‚àà·µõ (f ‚àò there) x‚àà ≥

mutual
  subterms‚äÜ·∂ú : ds ‚äÜ subterms‚Ä≤ (C ds)
  subterms‚äÜ·∂ú {ds = d ‚à∑ ds} (here refl) = here refl
  subterms‚äÜ·∂ú {ds = d ‚à∑ ds} (there d‚àà)  = there $ ‚àà-++‚Å∫ ≥ (subterms‚Ä≤ $ D d) (subterms‚äÜ·∂ú d‚àà)

  subterms‚äÜ·µõ : (v , c) ‚àà vcs ‚Üí c ‚äÜ subterms‚Ä≤ (VCS vcs)
  subterms‚äÜ·µõ {vcs = (_ , c) ‚à∑ vcs} (here refl) = ‚àà-++‚Å∫À° ‚àò subterms‚äÜ·∂ú
  subterms‚äÜ·µõ {vcs = (_ , c) ‚à∑ vcs} (there p)   = ‚àà-++‚Å∫ ≥ (subterms‚Ä≤ $ C c) ‚àò subterms‚äÜ·µõ p

  subterms‚äÜ·µõ‚Ä≤ : c ‚àà map proj‚ÇÇ vcs ‚Üí subterms·∂ú‚Ä≤ c ‚äÜ subterms·µà‚Ä≤ (split vcs)
  subterms‚äÜ·µõ‚Ä≤ {vcs = (v , c) ‚à∑ _}   (here refl) = ‚àà-++‚Å∫À°
  subterms‚äÜ·µõ‚Ä≤ {vcs = (v , c) ‚à∑ vcs} (there c‚àà)  = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚äÜ·µõ‚Ä≤ {vcs = vcs} c‚àà

  subterms‚äÜ·µõ·∂ú‚Å±À¢ : ‚àÄ {vcis : List (Value √ó Contract √ó Id)} ‚Üí let (vs , cs , ys) = unzip‚ÇÉ vcis in
      c ‚àà cs
    ‚Üí subterms·∂ú‚Ä≤ c ‚äÜ subterms·µà‚Ä≤ (split $ zip vs cs)
  subterms‚äÜ·µõ·∂ú‚Å±À¢ {vcis = (v , c , _) ‚à∑ _}    (here refl)
    = ‚àà-++‚Å∫À°
  subterms‚äÜ·µõ·∂ú‚Å±À¢ {vcis = (v , c , _) ‚à∑ vcis} (there c‚àà)
    = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚äÜ·µõ·∂ú‚Å±À¢ {vcis = vcis} c‚àà

mutual
  subterms‚Ä≤-names‚äÜ·µà : d ‚àà subterms‚Ä≤ (D d‚Ä≤) ‚Üí names d ‚äÜ names d‚Ä≤
  subterms‚Ä≤-names‚äÜ·µà {d‚Ä≤ = d} with d
  ... | put xs &reveal as if _ ‚áí ds = Œª x‚àà ‚Üí ‚àà-++‚Å∫ ≥ (map inj‚ÇÇ xs) ‚àò ‚àà-++‚Å∫ ≥ (map inj‚ÇÅ as) ‚àò subterms‚Ä≤-names‚äÜ·∂ú {ds = ds} x‚àà
  ... | withdraw _                  = Œª ()
  ... | split vcs                   = subterms‚Ä≤-names‚äÜ·µõ {vcs = vcs}
  ... | _ ‚áí d‚Ä≤                      = subterms‚Ä≤-names‚äÜ·µà {d‚Ä≤ = d‚Ä≤}
  ... | after _ ‚áí d‚Ä≤                = subterms‚Ä≤-names‚äÜ·µà {d‚Ä≤ = d‚Ä≤}

  subterms‚Ä≤-names‚äÜ·∂ú : d ‚àà subterms‚Ä≤ (C ds) ‚Üí names d ‚äÜ names ds
  subterms‚Ä≤-names‚äÜ·∂ú {ds = d ‚à∑ ds} (here refl) = ‚àà-++‚Å∫À°
  subterms‚Ä≤-names‚äÜ·∂ú {ds = d ‚à∑ ds} (there p)
    with ‚àà-++‚Åª _ p
  ... | inj‚ÇÇ p‚Ä≤ = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚Ä≤-names‚äÜ·∂ú {ds = ds} p‚Ä≤
  ... | inj‚ÇÅ p‚Ä≤ = ‚àà-++‚Å∫À° ‚àò subterms‚Ä≤-names‚äÜ·µà {d‚Ä≤ = d} p‚Ä≤

  subterms‚Ä≤-names‚äÜ·µõ : d ‚àà subterms‚Ä≤ (VCS vcs) ‚Üí names d ‚äÜ names vcs
  subterms‚Ä≤-names‚äÜ·µõ {vcs = (_ , []) ‚à∑ vcs} p = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚Ä≤-names‚äÜ·µõ {vcs = vcs} p
  subterms‚Ä≤-names‚äÜ·µõ {vcs = (_ , ds) ‚à∑ vcs} p
    with ‚àà-++‚Åª (subterms‚Ä≤ $ C ds) p
  ... | inj‚ÇÅ p‚Ä≤ = ‚àà-++‚Å∫À° ‚àò subterms‚Ä≤-names‚äÜ·∂ú {ds = ds} p‚Ä≤
  ... | inj‚ÇÇ p‚Ä≤ = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚Ä≤-names‚äÜ·µõ {vcs = vcs} p‚Ä≤

mutual
  subterms‚Ä≤-putComponents‚äÜ·µà : d ‚àà subterms‚Ä≤ (D d‚Ä≤) ‚Üí putComponents d ‚äÜ putComponents d‚Ä≤
  subterms‚Ä≤-putComponents‚äÜ·µà {d‚Ä≤ = d} with d
  ... | put _ &reveal _ if _ ‚áí ds = Œª x‚àà ‚Üí there ‚àò subterms‚Ä≤-putComponents‚äÜ·∂ú {ds = ds} x‚àà
  ... | withdraw _                = Œª ()
  ... | split vcs                 = subterms‚Ä≤-putComponents‚äÜ·µõ {vcs = vcs}
  ... | _ ‚áí d‚Ä≤                    = subterms‚Ä≤-putComponents‚äÜ·µà {d‚Ä≤ = d‚Ä≤}
  ... | after _ ‚áí d‚Ä≤              = subterms‚Ä≤-putComponents‚äÜ·µà {d‚Ä≤ = d‚Ä≤}

  subterms‚Ä≤-putComponents‚äÜ·∂ú : d ‚àà subterms‚Ä≤ (C ds) ‚Üí putComponents d ‚äÜ putComponents ds
  subterms‚Ä≤-putComponents‚äÜ·∂ú {ds = _ ‚à∑ _}  (here refl) = ‚àà-++‚Å∫À°
  subterms‚Ä≤-putComponents‚äÜ·∂ú {ds = d ‚à∑ ds} (there p)
    with ‚àà-++‚Åª _ p
  ... | inj‚ÇÇ p‚Ä≤ = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚Ä≤-putComponents‚äÜ·∂ú {ds = ds} p‚Ä≤
  ... | inj‚ÇÅ p‚Ä≤ = ‚àà-++‚Å∫À°   ‚àò subterms‚Ä≤-putComponents‚äÜ·µà  {d‚Ä≤ = d} p‚Ä≤

  subterms‚Ä≤-putComponents‚äÜ·µõ : d ‚àà subterms‚Ä≤ (VCS vcs) ‚Üí putComponents d ‚äÜ putComponents vcs
  subterms‚Ä≤-putComponents‚äÜ·µõ {vcs = (_ , []) ‚à∑ vcs} p = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚Ä≤-putComponents‚äÜ·µõ {vcs = vcs} p
  subterms‚Ä≤-putComponents‚äÜ·µõ {vcs = (_ , ds) ‚à∑ vcs} p
    with ‚àà-++‚Åª (subterms‚Ä≤ $ C ds) p
  ... | inj‚ÇÅ p‚Ä≤ = ‚àà-++‚Å∫À° ‚àò subterms‚Ä≤-putComponents‚äÜ·∂ú {ds = ds} p‚Ä≤
  ... | inj‚ÇÇ p‚Ä≤ = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚Ä≤-putComponents‚äÜ·µõ {vcs = vcs} p‚Ä≤

mutual
  subterms‚Ä≤-part‚äÜ·µà : d ‚àà subterms·µà‚Ä≤ d‚Ä≤ ‚Üí participants d ‚äÜ participants d‚Ä≤
  subterms‚Ä≤-part‚äÜ·µà {d‚Ä≤ = d} with d
  ... | put _ &reveal _ if _ ‚áí ds = subterms‚Ä≤-part‚äÜ·∂ú {ds = ds}
  ... | withdraw _                = Œª ()
  ... | split vcs                 = subterms‚Ä≤-part‚äÜ·µõ {vcs = vcs}
  ... | _ ‚áí d‚Ä≤                    = Œª x‚àà ‚Üí there ‚àò subterms‚Ä≤-part‚äÜ·µà {d‚Ä≤ = d‚Ä≤} x‚àà
  ... | after _ ‚áí d‚Ä≤              = subterms‚Ä≤-part‚äÜ·µà {d‚Ä≤ = d‚Ä≤}

  subterms‚Ä≤-part‚äÜ·∂ú : d ‚àà subterms·∂ú‚Ä≤ ds ‚Üí participants d ‚äÜ participants ds
  subterms‚Ä≤-part‚äÜ·∂ú {ds = d ‚à∑ ds} (here refl) = ‚àà-++‚Å∫À°
  subterms‚Ä≤-part‚äÜ·∂ú {ds = d ‚à∑ ds} (there p)
    with ‚àà-++‚Åª _ p
  ... | inj‚ÇÇ p‚Ä≤ = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚Ä≤-part‚äÜ·∂ú {ds = ds} p‚Ä≤
  ... | inj‚ÇÅ p‚Ä≤ = ‚àà-++‚Å∫À°   ‚àò subterms‚Ä≤-part‚äÜ·µà {d‚Ä≤ = d} p‚Ä≤

  subterms‚Ä≤-part‚äÜ·µõ : d ‚àà subterms·µõ‚Ä≤ vcs ‚Üí participants d ‚äÜ participants vcs
  subterms‚Ä≤-part‚äÜ·µõ {vcs = (_ , []) ‚à∑ vcs} p = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚Ä≤-part‚äÜ·µõ {vcs = vcs} p
  subterms‚Ä≤-part‚äÜ·µõ {vcs = (_ , ds) ‚à∑ vcs} p
    with ‚àà-++‚Åª (subterms‚Ä≤ $ C ds) p
  ... | inj‚ÇÅ p‚Ä≤ = ‚àà-++‚Å∫À°   ‚àò subterms‚Ä≤-part‚äÜ·∂ú {ds = ds} p‚Ä≤
  ... | inj‚ÇÇ p‚Ä≤ = ‚àà-++‚Å∫ ≥ _ ‚àò subterms‚Ä≤-part‚äÜ·µõ {vcs = vcs} p‚Ä≤
